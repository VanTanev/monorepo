{
  "$schema": "https://json.schemastore.org/tsconfig",
  "compilerOptions": {
    /* Fixes interop between CJS and ESM packages */
    "esModuleInterop": true,
    /* Skip checking .d.ts files. This is necessary to avoid type-checking everything in node_modules */
    "skipLibCheck": true,
    /* Prefer the more stable es2023 over esnext */
    "target": "es2023",
    /* Allow JavaScript files to be imported */
    "allowJs": true,
    /* Allow .json files to be imported */
    "resolveJsonModule": true,
    /* Force all files to be treated as modules instead of scripts, fixes obscure TS errors */
    "moduleDetection": "force",
    /* Disallow TS code that uses project-wide type information, makes TS compatible with single-file transpilers like Babel */
    "isolatedModules": true,
    /* Simplify TS transpilation - any import without the `type` keyword is preserved in the output JS */
    "verbatimModuleSyntax": true,
    /* Strictness */
    "strict": true,
    /* Forces you to check if accessing arr[i] is undefined, which is a common source of bugs */
    "noUncheckedIndexedAccess": true,
    /* Forces you to declare if a subclass method overrides a parent class method */
    "noImplicitOverride": true,
    /* Do not allow code that requires emitting JS from TS-only notations (eg, enum) */
    "erasableSyntaxOnly": true,

    /* Only typecheck, do not compile to JS */
    "noEmit": true,
    /* We're not compiling with TS, so preserve ESM import/export and CJS require/exports statements verbatim and leave the bundler to handle them */
    "module": "preserve",
    /* Match the target setting */
    "lib": ["es2023"]
  }
}
